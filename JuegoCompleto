#include <windows.h>
#include <ctime>
#include <iostream>
#include <iomanip>
#include <stdlib.h>
#include <conio.h>
#include <fstream>

#define ARRIBA 72
#define IZQUIERDA 75
#define DERECHA 77
#define ABAJO 80
#define ESC 27
#define MAX_PUNTUACIONES 100

struct tPuntuacion { //Estructura de las puntuaciones

	std::string nombre = "-";
	int valor = 0;

};

struct tListaPuntuaciones {

	tPuntuacion lista[MAX_PUNTUACIONES];
	int contador = 0;

};

struct tSnake {
	int puntuacion = 0;
	int cuerpo[200][2];
	int n = 1, tam = 10, dir = 3; // n=suma de 1 cuerpo por cada comida, Tam= taÃ±ano snake, dir=direccion
	int x = 10, y = 12; // direccion snake
	int xc = 30, yc = 12; //posicion de comida
	int velocidad = 100;
	char tecla;
};

int menu();
bool cargarFicheroPuntuaciones(tListaPuntuaciones& listaPuntuaciones);
void guardarFicheroPuntuaciones(tListaPuntuaciones& listaPuntuaciones);
void guardarPuntuacion(tListaPuntuaciones& listaPuntuaciones, int puntuacion);
void ordenarPuntuaciones(tListaPuntuaciones& listaPuntuaciones);
void mostrarPuntuaciones(tListaPuntuaciones& listaPuntuaciones);
void inicarCuerpoSnake(tSnake& s);
void gotoxy(int x, int y);
void OcultaCursor();
void pintarMarco();
void pintarMarcador(int puntuacion);
void guardar_posicion(tSnake& s);
void dibujar_cuerpo(tSnake& s);
void borrar_cuerpo(tSnake& s);
void teclear(char& tecla, int& dir);
void comida(tSnake& s);
bool game_over(tSnake s);

int main() {

	srand(time(0)); // para que la comida salga en lugares aleatorios 
	bool acabar = false;
	tListaPuntuaciones listaPuntuaciones;
	tSnake* s;
	bool hayPuntuaciones = cargarFicheroPuntuaciones(listaPuntuaciones);
	ordenarPuntuaciones(listaPuntuaciones);
	while (!acabar) { //menu principal
		int op = menu();
		switch (op) {
		case 0: // para salir del juego
			acabar = true;
			break;
		case 1: //para jugar 
			system("cls");
			s = new tSnake();
			OcultaCursor();
			pintarMarco();
			gotoxy(s->xc, s->yc);
			printf("%c", 4);
			inicarCuerpoSnake(*s);
			while (s->tecla != ESC && game_over(*s)) {
				borrar_cuerpo(*s);
				guardar_posicion(*s);
				dibujar_cuerpo(*s);
				comida(*s);
				pintarMarcador(s->puntuacion);
				//Con dos teclear se mejora el tiempo para giros bruscos
				teclear(s->tecla, s->dir);
				teclear(s->tecla, s->dir);
				if (s->dir == 1) s->y--;
				else if (s->dir == 2) s->y++;
				else if (s->dir == 3) s->x++;
				else if (s->dir == 4) s->x--;
				Sleep(s->velocidad);
			}
			pintarMarco();
			std::cout << "\n\nHas perdido la partida\n";
			system("pause");
			system("cls");
			guardarPuntuacion(listaPuntuaciones, s->puntuacion);
			ordenarPuntuaciones(listaPuntuaciones);
			guardarFicheroPuntuaciones(listaPuntuaciones);
			hayPuntuaciones = true;
			delete s;
			break;
		case 2: //Tabla de puntuaciones
			if (hayPuntuaciones)
				mostrarPuntuaciones(listaPuntuaciones);
			else
				std::cout << "No hay puntuaciones cargadas\n";
			system("pause");
		}

	}
	return 0;

}

int menu() { //funcion menu

	int op = 0;
	do {
		system("cls");
		std::cout << " 0 - Salir\n";
		std::cout << " 1 - Jugar\n";
		std::cout << " 2 - Mostrar puntuaciones\n";
		std::cout << "Escriba una opcion: ";
		std::cin >> op;
	} while (op < 0 || op > 2);
	return op;

}

bool cargarFicheroPuntuaciones(tListaPuntuaciones& listaPuntuaciones) { // Estrucura de  puntuaciones

	bool devolver = false;
	std::ifstream archivo;
	archivo.open("puntuaciones.txt");
	if (archivo.is_open()) {
		archivo >> listaPuntuaciones.contador;
		for (int i = 0; i < listaPuntuaciones.contador; i++) {
			archivo >> listaPuntuaciones.lista[i].nombre;
			archivo >> listaPuntuaciones.lista[i].valor;
		}
		devolver = true;
	}
	return devolver;

}

void guardarFicheroPuntuaciones(tListaPuntuaciones& listaPuntuaciones) { 

	system("cls");
	std::ofstream archivo;
	archivo.open("puntuaciones.txt");
	archivo << listaPuntuaciones.contador << "\n";
	for (int i = 0; i < listaPuntuaciones.contador; i++) {
		archivo << listaPuntuaciones.lista[i].nombre << "\n";
		archivo << listaPuntuaciones.lista[i].valor << "\n";
	}

}

void guardarPuntuacion(tListaPuntuaciones& listaPuntuaciones, int puntuacion) {

	std::string auxNombre;
	if (listaPuntuaciones.contador < MAX_PUNTUACIONES) {
		std::cout << "Escriba su nombre: ";
		std::cin >> auxNombre;
		listaPuntuaciones.lista[listaPuntuaciones.contador].nombre = auxNombre;
		listaPuntuaciones.lista[listaPuntuaciones.contador].valor = puntuacion;
		listaPuntuaciones.contador++;
	}
	else {
		std::cout << "No se pueden guardar mas puntuaciones\n";
		std::cout << "Indique si desea borrar la ultima para guardar esta puntuacion\n";
		int op;
		do {
			std::cout << "1 - Si\n";
			std::cout << "2 - No\n";
			std::cin >> op;
			system("cls");
		} while (op < 1 || op > 2);
		if (op == 1) {
			std::cout << "Escriba su nombre: ";
			std::cin >> auxNombre;
			listaPuntuaciones.lista[99].nombre = auxNombre;
			listaPuntuaciones.lista[99].valor = puntuacion;
		}
	}

}

void ordenarPuntuaciones(tListaPuntuaciones& listaPuntuaciones) {

	bool inter = true;
	int i = 0;
	while ((i < listaPuntuaciones.contador - 1) && inter) {
		inter = false;
		for (int j = listaPuntuaciones.contador - 1; j > i; j--) {
			if (listaPuntuaciones.lista[j].valor > listaPuntuaciones.lista[j - 1].valor) {
				tPuntuacion tmp;
				tmp = listaPuntuaciones.lista[j];
				listaPuntuaciones.lista[j] = listaPuntuaciones.lista[j - 1];
				listaPuntuaciones.lista[j - 1] = tmp;
				inter = true;
			}
		}
		if (inter) {
			i++;
		}
	}

}

void mostrarPuntuaciones(tListaPuntuaciones& listaPuntuaciones) {

	system("cls");
	std::cout << "Marcador de puntuaciones:\n";
	std::cout << "---------------------------------------\n";
	for (int i = 0; i < listaPuntuaciones.contador; i++) {
		std::cout << std::setw(3) << i + 1 << ") " << std::setw(20) << listaPuntuaciones.lista[i].nombre;
		std::cout << "  " << std::setw(4) << listaPuntuaciones.lista[i].valor << " punto(s)\n";
		std::cout << "---------------------------------------\n";
	}

}

void inicarCuerpoSnake(tSnake& s) { 

	for (int i = 1; i < s.tam; i++) {
		s.cuerpo[i][0] = s.x;
		s.cuerpo[i][1] = s.y;
		gotoxy(s.x, s.y);
		printf("*");
		s.x++;
	}

}

void gotoxy(int x, int y) {

	HANDLE hCon;
	COORD dwPos;

	dwPos.X = x;
	dwPos.Y = y;
	hCon = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorPosition(hCon, dwPos);

}
void OcultaCursor() {

	CONSOLE_CURSOR_INFO cci = { 100, FALSE };
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cci);

}

void pintarMarco() {

	for (int i = 2; i < 78; i++) {
		gotoxy(i, 3); printf("%c", 205);
		gotoxy(i, 23); printf("%c", 205);
	}
	for (int v = 4; v < 23; v++) {
		gotoxy(2, v); printf("%c", 186);
		gotoxy(77, v); printf("%c", 186);
	}

}

void pintarMarcador(int puntuacion) {

	gotoxy(5, 25); printf("%c", 'P');
	gotoxy(6, 25); printf("%c", 'U');
	gotoxy(7, 25); printf("%c", 'N');
	gotoxy(8, 25); printf("%c", 'T');
	gotoxy(9, 25); printf("%c", 'O');
	gotoxy(10, 25); printf("%c", 'S');
	gotoxy(12, 25); printf("%c", ':');
	gotoxy(18, 25); printf("%d", puntuacion % 10);
	puntuacion /= 10;
	gotoxy(17, 25); printf("%d", puntuacion % 10);
	puntuacion /= 10;
	gotoxy(16, 25); printf("%d", puntuacion % 10);
	puntuacion /= 10;
	gotoxy(15, 25); printf("%d", puntuacion % 10);

}

void guardar_posicion(tSnake& s) {

	s.cuerpo[s.n][0] = s.x;
	s.cuerpo[s.n][1] = s.y;

}

void dibujar_cuerpo(tSnake& s) {

	gotoxy(s.cuerpo[s.n][0], s.cuerpo[s.n][1]);
	printf("*");
	s.n++;
	if (s.n == s.tam) s.n = 1;

}

void borrar_cuerpo(tSnake& s) {

	gotoxy(s.cuerpo[s.n][0], s.cuerpo[s.n][1]);
	printf(" ");

}

void teclear(char& tecla, int& dir) {

	if (kbhit()) {
		tecla = getch();
		switch (tecla) {
		case ARRIBA: if (dir != 2) dir = 1; break;
		case ABAJO: if (dir != 1) dir = 2; break;
		case DERECHA: if (dir != 4) dir = 3; break;
		case IZQUIERDA: if (dir != 3) dir = 4; break;
		}
	}

}

void comida(tSnake& s) {

	if (s.x == s.xc && s.y == s.yc) {
		s.xc = (rand() % 73) + 4;
		s.yc = (rand() % 19) + 4;
		gotoxy(s.xc, s.yc);
		printf("%c", 4);
		s.tam++;
		for (int i = s.tam - 1; i >= s.n; i--) {
			s.cuerpo[i][0] = s.cuerpo[i - 1][0];
			s.cuerpo[i][1] = s.cuerpo[i - 1][1];
		}
		s.cuerpo[s.n][0] = s.cuerpo[s.n - 1][0] - 1;
		s.cuerpo[s.n][1] = s.cuerpo[s.n - 1][1] - 1;
		s.puntuacion++;
	}

}

bool game_over(tSnake s) {

	if (s.y == 3 || s.y == 23 || s.x == 2 || s.x == 77) return false;
	for (int j = s.tam - 1; j > 0; j--) {
		if (s.cuerpo[j][0] == s.x && s.cuerpo[j][1] == s.y)
			return false;
	}
	return true;

}
